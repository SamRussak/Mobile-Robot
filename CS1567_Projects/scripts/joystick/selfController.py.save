#!/usr/bin/env python

import rospy
import math
from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion
from geometry_msgs.msg import Twist

pub = rospy.Publisher("kobuki_command", Twist, queue_size=10)
command = Twist()
maxSpeed = 0.7
distance = 1.0
degree = 0
target = 90.0
x = 0
y = 0

def odomCallback(data):
    # Convert quaternion to degree
    global degree, x, y
    q = [data.pose.pose.orientation.x,
         data.pose.pose.orientation.y,
         data.pose.pose.orientation.z,
         data.pose.pose.orientation.w]
    roll, pitch, yaw = euler_from_quaternion(q)
    # roll, pitch, and yaw are in radian
    degree = yaw * 180 / math.pi
    x = data.pose.pose.position.x
    y = data.pose.pose.position.y

def cleanUp():
    global pub, command
    command.linear.x = 0.0
    command.angular.z = 0.0
    pub.publish(command)
    rospy.sleep(1)

def remoteController():
    tempDistance
    move = False
    rotate = True
    mode = input("Select Mode (1 for single and 2 for double)")
    if mode == 1:
        print("Enter a command and press enter: ")
	mode1String = raw_input()
	action, maxSpeed, tempDistance = mode1String.split()
        if (action == "R")
	    target = tempDistance
	elif (action == "F")
	    distance = tempDistance
        elif (action == "B")
            distance = -tempDistance
    elif mode == 2:
	print("
    else:
        pass
    global distance, degree, x, y, pub, command, maxSpeed, target
    rospy.init_node("selfController", anonymous=True)
    rospy.Subscriber('/odom', Odometry, odomCallback)
    flag = True
    flag2 = True
    rospy.on_shutdown(cleanUp)
    while pub.get_num_connections() == 0:
        pass
    while not rospy.is_shutdown() and flag and action == "F"
	
	if (x >= distance):
            flag = False
            command.linear.x = 0
            command.angular.z = 0
        elif (x == 0.0 or (x < distance/3 and command.linear.x < maxSpeed)):
            command.linear.x = command.linear.x + 0.015
        elif (x > distance/3 and x < 2*distance/3):
	    pass
        elif (x > 2*distance/3 and x < distance):
            command.linear.x = command.linear.x - 0.015
        pub.publish(command)
	rospy.sleep(0.1)
    while not rospy.is_shutdown() and flag2 and action == "R":
	if (degree >= target):
            flag2 = False
            command.linear.x = 0
            command.angular.z = 0
        elif (degree <= 0.01 or (degree < target/3 and command.angular.z < maxSpeed)):
            command.angular.z = command.angular.z + 0.005
        elif (degree > target/3 and degree < 2*target/3):
            pass
        elif (degree > 2*target/3 and degree < target):
            command.angular.z = command.angular.z - 0.01
        pub.publish(command)
	print command
	print degree
        rospy.sleep(0.1)
        while not rospy.is_shutdown() and flag and action == "F"

        if (x >= distance):
            flag = False
            command.linear.x = 0
            command.angular.z = 0
        elif (x == 0.0 or (x < distance/3 and command.linear.x < maxSpeed)):
            command.linear.x = command.linear.x + 0.015
        elif (x > distance/3 and x < 2*distance/3):
            pass
        elif (x > 2*distance/3 and x < distance):
            command.linear.x = command.linear.x - 0.015
        pub.publish(command)
        rospy.sleep(0.1)

    command.linear.x = 0
    command.angular.z = 0
    pub.publish(command)
    rospy.sleep(1)
          
            
 #       while(x < distance/2):
#            command.linear.x = command.linear.x + 0.01
 #           rospy.sleep(.05)
  #          pub.publish(command)
   #     while(x >= distance/2 and x < distance):
    #        command.linear.x = command.linear.x - 0.01
     #       rospy.sleep(.05)
      #      pub.publish(command)        
   # command.linear.x = 0
   # pub.publish(command)
    
    
    #while pub.get_num_connections() == 0:
    #    pass

if __name__ == '__main__':
    remoteController()

